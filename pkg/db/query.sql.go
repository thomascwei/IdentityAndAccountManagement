// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :execresult
INSERT INTO accounts (username, password, email, auth)
VALUES (?, ?, ?, ?)
`

type CreateAccountParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Email    string `json:"email"`
	Auth     int32  `json:"auth"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (sql.Result, error) {
	return q.exec(ctx, q.createAccountStmt, createAccount,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.Auth,
	)
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE
FROM accounts
WHERE id = ?
`

func (q *Queries) DeleteAccount(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteAccountStmt, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, username, email, auth
FROM accounts
WHERE id = ?
LIMIT 1
`

type GetAccountRow struct {
	ID       int32  `json:"id"`
	Username string `json:"username"`
	Email    string `json:"email"`
	Auth     int32  `json:"auth"`
}

func (q *Queries) GetAccount(ctx context.Context, id int32) (GetAccountRow, error) {
	row := q.queryRow(ctx, q.getAccountStmt, getAccount, id)
	var i GetAccountRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Auth,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, username, email, auth
FROM accounts
ORDER BY id
`

type ListAccountsRow struct {
	ID       int32  `json:"id"`
	Username string `json:"username"`
	Email    string `json:"email"`
	Auth     int32  `json:"auth"`
}

func (q *Queries) ListAccounts(ctx context.Context) ([]ListAccountsRow, error) {
	rows, err := q.query(ctx, q.listAccountsStmt, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAccountsRow
	for rows.Next() {
		var i ListAccountsRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Auth,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :exec
UPDATE accounts
SET username = ?,
    email    = ?,
    auth     = ?
WHERE id = ?
`

type UpdateAccountParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Auth     int32  `json:"auth"`
	ID       int32  `json:"id"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) error {
	_, err := q.exec(ctx, q.updateAccountStmt, updateAccount,
		arg.Username,
		arg.Email,
		arg.Auth,
		arg.ID,
	)
	return err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE accounts
SET password = ?
WHERE id = ?
`

type UpdatePasswordParams struct {
	Password string `json:"password"`
	ID       int32  `json:"id"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.exec(ctx, q.updatePasswordStmt, updatePassword, arg.Password, arg.ID)
	return err
}
